#ifndef __CHIP_SUPPORT_H__
#define	__CHIP_SUPPORT_H__

typedef enum aml_pad_tb{
	PAD_DUMMY = 0,
	
	PAD_GPIOA_0,
	PAD_GPIOA_1,
	PAD_GPIOA_2,
	PAD_GPIOA_3,
	PAD_GPIOA_4,
	PAD_GPIOA_5,
	PAD_GPIOA_6,
	PAD_GPIOA_7,
	PAD_GPIOA_8,
	PAD_GPIOA_9,
	PAD_GPIOA_10,
	PAD_GPIOA_11,
	PAD_GPIOA_12,
	PAD_GPIOA_13,
	PAD_GPIOA_14,
	PAD_GPIOA_15,
	PAD_GPIOA_16,
	PAD_GPIOA_17,
	PAD_GPIOA_18,
	PAD_GPIOA_19,
	PAD_GPIOA_20,
	PAD_GPIOA_21,
	PAD_GPIOA_22,
	PAD_GPIOA_23,
	
	PAD_GPIOB_0,
	PAD_GPIOB_1,
	PAD_GPIOB_2,
	PAD_GPIOB_3,
	PAD_GPIOB_4,
	PAD_GPIOB_5,
	PAD_GPIOB_6,
	PAD_GPIOB_7,
	PAD_GPIOB_8,
	PAD_GPIOB_9,
	PAD_GPIOB_10,
	PAD_GPIOB_11,
	PAD_GPIOB_12,
	PAD_GPIOB_13,
	PAD_GPIOB_14,
	PAD_GPIOB_15,
	PAD_GPIOB_16,
	PAD_GPIOB_17,
	PAD_GPIOB_18,
	PAD_GPIOB_19,
	PAD_GPIOB_20,
	PAD_GPIOB_21,
	PAD_GPIOB_22,
	
	PAD_GPIOC_0,
	PAD_GPIOC_1,
	PAD_GPIOC_2,
	PAD_GPIOC_3,
	PAD_GPIOC_4,
	PAD_GPIOC_5,
	PAD_GPIOC_6,
	PAD_GPIOC_7,
	PAD_GPIOC_8,
	PAD_GPIOC_9,
	PAD_GPIOC_10,
	PAD_GPIOC_11,
	PAD_GPIOC_12,
	PAD_GPIOC_13,
	PAD_GPIOC_14,
	PAD_GPIOC_15,
	PAD_GPIOC_16,
	PAD_GPIOC_17,
	PAD_GPIOC_18,
	PAD_GPIOC_19,
	PAD_GPIOC_20,
	PAD_GPIOC_21,
	PAD_GPIOC_22,
	PAD_GPIOC_23,
	PAD_GPIOC_24,
	PAD_GPIOC_25,
	PAD_GPIOC_26,
	PAD_GPIOC_27,
	PAD_GPIOC_28,
	PAD_GPIOC_29,
	PAD_GPIOC_30,
	PAD_GPIOC_31,
	PAD_GPIOC_32,
	PAD_GPIOC_33,
	PAD_GPIOC_34,
	PAD_GPIOC_35,
	PAD_GPIOC_36,
	PAD_GPIOC_37,
	PAD_GPIOC_38,
	PAD_GPIOC_39,
	PAD_GPIOC_40,
	PAD_GPIOC_41,
	PAD_GPIOC_42,
	PAD_GPIOC_43,
	PAD_GPIOC_44,
	PAD_GPIOC_45,
	PAD_GPIOC_46,
	PAD_GPIOC_47,
	PAD_GPIOC_48,
	PAD_GPIOC_49,
	PAD_GPIOC_50,
	PAD_GPIOC_51,
	PAD_GPIOC_52,
	PAD_GPIOC_53,
	PAD_GPIOC_54,
	PAD_GPIOC_55,
	
	PAD_GPIOD_0,
	PAD_GPIOD_1,
	PAD_GPIOD_2,
	PAD_GPIOD_3,
	PAD_GPIOD_4,
	PAD_GPIOD_5,
	PAD_GPIOD_6,
	PAD_GPIOD_7,
	PAD_GPIOD_8,
	PAD_GPIOD_9,
	PAD_GPIOD_10,
	PAD_GPIOD_11,
	PAD_GPIOD_12,
	PAD_GPIOD_13,
	
	PAD_CARD_0,
	PAD_CARD_1,
	PAD_CARD_2,
	PAD_CARD_3,
	PAD_CARD_4,
	PAD_CARD_5,
	PAD_CARD_6,
	PAD_CARD_7,
	PAD_CARD_8,
	PAD_CARD_9,
	PAD_CARD_10,
	PAD_CARD_11,
	PAD_CARD_12,
	PAD_CARD_13,
	PAD_CARD_14,
	PAD_CARD_15,
	PAD_CARD_16,
	PAD_CARD_17,
	PAD_CARD_18,
	PAD_CARD_19,
	PAD_CARD_20,
	PAD_CARD_21,
	PAD_CARD_22,
	PAD_CARD_23,
	PAD_CARD_24,
	PAD_CARD_25,
	
	PAD_SPI_CSA,
	PAD_SPI_HD,
	PAD_SPI_C,
	PAD_SPI_D,
	PAD_SPI_Q,
	PAD_SPI_W,

	PAD_TEST_N,
	PAD_JTAG_TMS,
	PAD_JTAG_TDI,
	PAD_JTAG_TCK,
	PAD_JTAG_TDO,

} aml_pad_t;

typedef enum aml_module_tb {
	MODULE_GPIO = 1,
	MODULE_MEM,
	MODULE_I2SOUT,
	MODULE_I2SIN,
	MODULE_SPDIF,
	MODULE_FECA,
	MODULE_FECB,
	MODULE_FECOUT,
	MODULE_DS,
	MODULE_SPI,
	MODULE_NAND,
	MODULE_ETHERNET,
	MODULE_BT656IN,
	MODULE_REMOTE,
	MODULE_ISO7816,
	MODULE_I2CM,
	MODULE_I2CS,
	MODULE_UART,
	MODULE_PWM,
	MODULE_DVIN,
	MODULE_TCON,
	MODULE_HDMI,
	MODULE_LCD,
	MODULE_CCIR601,
	MODULE_CCIR656,	
	MODULE_ATAPI,
	MODULE_SDIOA,
	MODULE_SDIOB,
	MODULE_SDIOC,
	MODULE_ENCODER,
	MODULE_OTHER,
} aml_module_t;

#define MODULE_MASK(x)								(1<<(x))

/*
 * Module signal(logic) defination
 */
typedef enum aml_sig_mem {
	MODSIG_MEM1_SCS1,
	MODSIG_MEM1_A12,
	MODSIG_MEM2_A12,
	MODSIG_MEM_MAX
} aml_mem_t;
 
typedef enum aml_sig_i2s {
	MODSIG_I2S_AMCLK,
	MODSIG_I2S_AOCLK,
	MODSIG_I2S_ALRCLK,
	MODSIG_I2S_CHAN0,
	MODSIG_I2S_CHAN1,
	MODSIG_I2S_CHAN2,
	MODSIG_I2S_CHAN3,
	MODSIG_I2S_MAX
} aml_i2s_t;

typedef enum aml_sig_spdif {
	MODSIG_SPDIF_SPDIFIN,
	MODSIG_SPDIF_SPDIFOUT,
	MODSIG_SPDIF_MAX
} aml_spdif_t;

typedef enum aml_sig_fec {
	MODSIG_FEC_FAIL,
	MODSIG_FEC_DVALID,
	MODSIG_FEC_CLK,
	MODSIG_FEC_SOP,
	MODSIG_FEC_D0,
	MODSIG_FEC_D1,
	MODSIG_FEC_D2,
	MODSIG_FEC_D3,
	MODSIG_FEC_D4,
	MODSIG_FEC_D5,
	MODSIG_FEC_D6,
	MODSIG_FEC_D7,
	MODSIG_FEC_MAX
} aml_fec_t;

typedef enum aml_sig_ds {
	MODSIG_DS_DS0,
	MODSIG_DS_DS1,
	MODSIG_DS_MAX
} aml_ds_t;

typedef enum aml_sig_nand {
	MODSIG_NAND_D0,
	MODSIG_NAND_D1,
	MODSIG_NAND_D2,
	MODSIG_NAND_D3,
	MODSIG_NAND_D4,
	MODSIG_NAND_D5,
	MODSIG_NAND_D6,
	MODSIG_NAND_D7,
	MODSIG_NAND_CE,
	MODSIG_NAND_CE2,
	MODSIG_NAND_BSY,
	MODSIG_NAND_CLE,
	MODSIG_NAND_ALE,
	MODSIG_NAND_RD,
	MODSIG_NAND_WR,
	MODSIG_NAND_MAX
} aml_nand_t;

typedef enum aml_sig_ethernet {
	MODSIG_ETHERNET_TXD0,
	MODSIG_ETHERNET_TXD1,
	MODSIG_ETHERNET_TXEN,
	MODSIG_ETHERNET_RXD0,
	MODSIG_ETHERNET_RXD1,
	MODSIG_ETHERNET_CRS,
	MODSIG_ETHERNET_ERR,
	MODSIG_ETHERNET_CLK,
	MODSIG_ETHERNET_MDC,
	MODSIG_ETHERNET_MDIO,
	
	//GPIO signal
	MODSIG_ETHERNET_HWRST,
	
	MODSIG_ETHERNET_MAX
} aml_ethernet_t;

typedef enum aml_sig_bt656in {
	MODSIG_BT656IN_IDQ,
	MODSIG_BT656IN_FID,
	MODSIG_BT656IN_CLK,
	MODSIG_BT656IN_VSYNC,
	MODSIG_BT656IN_HSYNC,
	MODSIG_BT656IN_D0,
	MODSIG_BT656IN_D1,
	MODSIG_BT656IN_D2,
	MODSIG_BT656IN_D3,
	MODSIG_BT656IN_D4,
	MODSIG_BT656IN_D5,
	MODSIG_BT656IN_D6,
	MODSIG_BT656IN_D7,
	MODSIG_BT656IN_MAX
} aml_bt656in_t;

typedef enum aml_sig_remote {
	MODSIG_REMOTE_REMOTE,
	MODSIG_REMOTE_IEC958,
	MODSIG_REMOTE_MAX
} aml_remote_t;

typedef enum aml_sig_iso7816 {
	MODSIG_ISO7816_RST,
	MODSIG_ISO7816_DET,
	MODSIG_ISO7816_DAT,
	MODSIG_ISO7816_CLK,
	MODSIG_ISO7816_MAX
} aml_iso7816_t;

typedef enum aml_sig_i2c {
	MODSIG_I2C_DAT,
	MODSIG_I2C_CLK,
	MODSIG_I2C_MAX
} aml_i2c_t;

typedef enum aml_sig_uart {
	MODSIG_UART_RX,
	MODSIG_UART_TX,
	MODSIG_UART_MAX
} aml_uart_t;

typedef enum aml_sig_pwm {
	MODSIG_PWM_PWMA,
	MODSIG_PWM_PWMB,
	MODSIG_PWM_MAX
} aml_pwm_t;

typedef enum aml_sig_spi {
	MODSIG_SPI_CSA,
	MODSIG_SPI_CSB,
	MODSIG_SPI_HD,
	MODSIG_SPI_C,
	MODSIG_SPI_D,
	MODSIG_SPI_Q,
	MODSIG_SPI_W,
	MODSIG_SPI_MAX
} aml_spi_t;

typedef enum aml_sig_dvin {
	MODSIG_DVIN_DIN0,
	MODSIG_DVIN_DIN1,
	MODSIG_DVIN_DIN2,
	MODSIG_DVIN_DIN3,
	MODSIG_DVIN_DIN4,
	MODSIG_DVIN_DIN5,
	MODSIG_DVIN_DIN6,
	MODSIG_DVIN_DIN7,
	MODSIG_DVIN_DIN8,
	MODSIG_DVIN_DIN9,
	MODSIG_DVIN_DIN10,
	MODSIG_DVIN_DIN11,
	MODSIG_DVIN_DIN12,
	MODSIG_DVIN_DIN13,
	MODSIG_DVIN_DIN14,
	MODSIG_DVIN_DIN15,
	MODSIG_DVIN_DIN16,
	MODSIG_DVIN_DIN17,
	MODSIG_DVIN_DIN18,
	MODSIG_DVIN_DIN19,
	MODSIG_DVIN_DIN20,
	MODSIG_DVIN_DIN21,
	MODSIG_DVIN_DIN22,
	MODSIG_DVIN_DIN23,
	MODSIG_DVIN_VS,
	MODSIG_DVIN_HS,
	MODSIG_DVIN_DE,
	MODSIG_DVIN_CLK,
	MODSIG_DVIN_MAX
} aml_dvin_t;

typedef enum aml_sig_tcon {
	MODSIG_TCON_CPH1,
	MODSIG_TCON_CPH2,
	MODSIG_TCON_CPH3,
	MODSIG_TCON_PWMVGHL,
	MODSIG_TCON_STH1,
	MODSIG_TCON_STH2,
	MODSIG_TCON_STV1,
	MODSIG_TCON_STV2,
	MODSIG_TCON_CPV1,
	MODSIG_TCON_CPV2,
	MODSIG_TCON_OEV1,
	MODSIG_TCON_OEV2,
	MODSIG_TCON_OEV3,
	MODSIG_TCON_OEH,
	MODSIG_TCON_VCOM,
	MODSIG_TCON_MAX
} aml_tcon_t;

typedef enum aml_sig_hdmi {
	MODSIG_HDMI_HS,
	MODSIG_HDMI_VS,
	MODSIG_HDMI_DE,
	MODSIG_HDMI_CLK,
	MODSIG_HDMI_DDR0,
	MODSIG_HDMI_DDR1,
	MODSIG_HDMI_DDR2,
	MODSIG_HDMI_DDR3,
	MODSIG_HDMI_DDR4,
	MODSIG_HDMI_DDR5,
	MODSIG_HDMI_DDR6,
	MODSIG_HDMI_DDR7,
	MODSIG_HDMI_DDR8,
	MODSIG_HDMI_DDR9,
	MODSIG_HDMI_DDR10,
	MODSIG_HDMI_DDR11,
	MODSIG_HDMI_SDR0,
	MODSIG_HDMI_SDR1,
	MODSIG_HDMI_SDR2,
	MODSIG_HDMI_SDR3,
	MODSIG_HDMI_SDR4,
	MODSIG_HDMI_SDR5,
	MODSIG_HDMI_SDR6,
	MODSIG_HDMI_SDR7,
	MODSIG_HDMI_SDR8,
	MODSIG_HDMI_SDR9,
	MODSIG_HDMI_SDR10,
	MODSIG_HDMI_SDR11,
	MODSIG_HDMI_SDR12,
	MODSIG_HDMI_SDR13,
	MODSIG_HDMI_SDR14,
	MODSIG_HDMI_SDR15,
	MODSIG_HDMI_SDR16,
	MODSIG_HDMI_SDR17,
	MODSIG_HDMI_SDR18,
	MODSIG_HDMI_SDR19,
	MODSIG_HDMI_SDR20,
	MODSIG_HDMI_SDR21,
	MODSIG_HDMI_SDR22,
	MODSIG_HDMI_SDR23,
	MODSIG_HDMI_MAX
} aml_hdmi_t;

typedef enum aml_sig_lcd {
	MODSIG_LCD_R0,
	MODSIG_LCD_R1,
	MODSIG_LCD_R2,
	MODSIG_LCD_R3,
	MODSIG_LCD_R4,
	MODSIG_LCD_R5,
	MODSIG_LCD_R6,
	MODSIG_LCD_R7,
	MODSIG_LCD_G0,
	MODSIG_LCD_G1,
	MODSIG_LCD_G2,
	MODSIG_LCD_G3,
	MODSIG_LCD_G4,
	MODSIG_LCD_G5,
	MODSIG_LCD_G6,
	MODSIG_LCD_G7,
	MODSIG_LCD_B0,
	MODSIG_LCD_B1,
	MODSIG_LCD_B2,
	MODSIG_LCD_B3,
	MODSIG_LCD_B4,
	MODSIG_LCD_B5,
	MODSIG_LCD_B6,
	MODSIG_LCD_B7,
	MODSIG_LCD_MAX
} aml_lcd_t;

typedef enum aml_sig_ccir601 {
	MODSIG_CCIR601_HS,
	MODSIG_CCIR601_VS,
	MODSIG_CCIR601_CLK,
	MODSIG_CCIR601_D0,
	MODSIG_CCIR601_D1,
	MODSIG_CCIR601_D2,
	MODSIG_CCIR601_D3,
	MODSIG_CCIR601_D4,
	MODSIG_CCIR601_D5,
	MODSIG_CCIR601_D6,
	MODSIG_CCIR601_D7,
	MODSIG_CCIR601_MAX
} aml_ccir601_t;

typedef enum aml_sig_ccir656 {
	MODSIG_CCIR656_D0,
	MODSIG_CCIR656_D1,
	MODSIG_CCIR656_D2,
	MODSIG_CCIR656_D3,
	MODSIG_CCIR656_D4,
	MODSIG_CCIR656_D5,
	MODSIG_CCIR656_D6,
	MODSIG_CCIR656_D7,
	MODSIG_CCIR656_CLK,
	MODSIG_CCIR656_VS,
	MODSIG_CCIR656_HS,
	MODSIG_CCIR656_FIR,
	MODSIG_CCIR656_IDQ,
	MODSIG_CCIR656_MAX
} aml_ccir656_t;

typedef enum aml_sig_atapi {
	MODSIG_ATAPI_DA0,
	MODSIG_ATAPI_DA1,
	MODSIG_ATAPI_DA2,
	MODSIG_ATAPI_IRQ,
	MODSIG_ATAPI_DMARQ,
	MODSIG_ATAPI_DMACK,
	MODSIG_ATAPI_DIORDY,
	MODSIG_ATAPI_DIOR,
	MODSIG_ATAPI_DIOW,
	MODSIG_ATAPI_CS0,
	MODSIG_ATAPI_CS1,
	MODSIG_ATAPI_DD0,
	MODSIG_ATAPI_DD1,
	MODSIG_ATAPI_DD2,
	MODSIG_ATAPI_DD3,
	MODSIG_ATAPI_DD4,
	MODSIG_ATAPI_DD5,
	MODSIG_ATAPI_DD6,
	MODSIG_ATAPI_DD7,
	MODSIG_ATAPI_DD8,
	MODSIG_ATAPI_DD9,
	MODSIG_ATAPI_DD10,
	MODSIG_ATAPI_DD11,
	MODSIG_ATAPI_DD12,
	MODSIG_ATAPI_DD13,
	MODSIG_ATAPI_DD14,
	MODSIG_ATAPI_DD15,
	MODSIG_ATAPI_MAX
} aml_atapi_t;

typedef enum aml_sig_sdio {
	//HW signal
	MODSIG_SDIO_CMD,
	MODSIG_SDIO_CLK,
	MODSIG_SDIO_D0,
	MODSIG_SDIO_D1,
	MODSIG_SDIO_D2,
	MODSIG_SDIO_D3,
	//SW(GPIO) signal
	MODSIG_SDIO_DET,
	MODSIG_SDIO_WP,
	MODSIG_SDIO_PWR,
	
	MODSIG_SDIO_MAX
} aml_sdio_t;

typedef enum aml_sig_encoder {
	MODSIG_ENCODER_ENET0,
	MODSIG_ENCODER_ENET1,
	MODSIG_ENCODER_ENC0,
	MODSIG_ENCODER_ENC1,
	MODSIG_ENCODER_ENC2,
	MODSIG_ENCODER_ENC3,
	MODSIG_ENCODER_ENC4,
	MODSIG_ENCODER_ENC5,
	MODSIG_ENCODER_ENC6,
	MODSIG_ENCODER_ENC7,
	MODSIG_ENCODER_ENC8,
	MODSIG_ENCODER_ENC9,
	MODSIG_ENCODER_ENC10,
	MODSIG_ENCODER_ENC11,
	MODSIG_ENCODER_ENC12,
	MODSIG_ENCODER_ENC13,
	MODSIG_ENCODER_ENC14,
	MODSIG_ENCODER_ENC15,
	MODSIG_ENCODER_MAX
} aml_encoder_t;

//#define MODSIG_NAME(x)								#x
/*
 * pad-signal mux data struction
 */
#define PADSIG_NUM									6
 
typedef struct reg_ctrl{
	ulong reg;
	ulong mask;
} aml_reg_ctrl_t;
 
typedef struct aml_pad_ctrl {
	aml_module_t module;
	ulong signal;
	ulong reg;
	ulong mask;
	ulong pol;
} aml_pad_ctrl_t;

typedef struct aml_padmux_node {
	char * name;
	ulong mod_mask;
	aml_pad_ctrl_t padmux[PADSIG_NUM];
	aml_reg_ctrl_t ioen;
	aml_reg_ctrl_t outlevel;
	aml_reg_ctrl_t inlevel;
} aml_padmux_node_t;

/*
 * function and global data declaration
 */
extern const aml_padmux_node_t padmux_tb[];
extern const ulong PADMUX_TBNUM;
int switch_module_io(aml_module_t module, ulong flag);
int search_pad(char * padname);
int switch_padsig(ulong index, aml_module_t module, ulong signal, ulong flag);
int ctrl_padlevel(ulong index, ulong ioen, ulong outlevel);
#endif
